# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type user {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  DOB: String!
  studentClass: String!
  subjects: String!
}

type auth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  access_token: String!
}

type classroom {
  id: ID!
  className: String!
  classSubjects: String!
  students: [user!]!
}

type teacher {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  DOB: String!
  TeacherClass: String!
  subjects: String!
}

type subject {
  id: ID!
  name: String!
  className: [classroom!]!
  teachers: [teacher!]!
  students: [user!]!
}

type parent {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  children: [student!]!
}

type student {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  studentClass: String!
  subjects: String!
  parents: [parent!]!
  teachers: String!
}

type studentAuth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  studentClass: String!
  access_token: String!
}

type AuthParent {
  """Example field (placeholder)"""
  exampleField: Int!
}

type parentauth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  access_token: String!
}

type teacherauth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  DOB: String!
  access_token: String!
}

type Query {
  getAllUsers: [user!]!
  findOne(id: String!): user!
  login(email: String!, password: String!): auth!
  AllClassRoom: [classroom!]!
  ClassRoom(id: String!): classroom!
  subjects: [subject!]!
  subject(id: ID!): subject!
  students: [student!]!
  student(id: String!): student!
  parents: [parent!]!
  parent(id: String!): parent!
  teachers: [teacher!]!
  teacher(id: String!): teacher!
  studentLogin(email: String!, password: String!): studentAuth!
  parentLogin(email: String!, password: String!): parentauth!
  authParents: [AuthParent!]!
  authParent(id: Int!): AuthParent!
  teacherLogin(email: String!, password: String!): teacherauth!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): user!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): String!
  removeUser(id: String!): String!
  createClassRoom(createClassRoomInput: CreateClassRoomInput!): classroom!
  updateClassRoom(updateClassRoomInput: UpdateClassRoomInput!): classroom!
  removeClassRoom(id: Int!): classroom!
  createSubject(createSubjectInput: CreateSubjectInput!): subject!
  createStudent(createStudentInput: CreateStudentInput!): student!
  assignParentsToStudent(assigParentsToStudent: AssignParentsToStudentInput!): student!
  createParent(createParentInput: CreateParentInput!): parent!
  assignStudentsToParent(assignStudentsToParent: AssignStudentsToParentInput!): parent!
  createTeacher(createTeacherInput: CreateTeacherInput!): teacher!
  updateTeacher(updateTeacherInput: UpdateTeacherInput!): teacher!
  removeTeacher(id: Int!): teacher!
  updateAuthParent(updateAuthParentInput: String!): AuthParent!
  removeAuthParent(id: Int!): AuthParent!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  gender: String
  DOB: String
  subjects: ID
  studentClass: String
}

input CreateClassRoomInput {
  className: String!
  classSubjects: [ID!]! = []
  students: [ID!]! = []
}

input UpdateClassRoomInput {
  className: String
  classSubjects: [String!]
  students: [ID!] = []
  id: ID!
  studentsId: [ID!]
}

input CreateSubjectInput {
  name: String!
  teachers: [ID!]! = []
  className: [ID!]! = []
  students: [ID!]! = []
}

input CreateStudentInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
  studentClass: String!
  parents: [ID!]! = []
}

input AssignParentsToStudentInput {
  studentId: ID!
  parentIds: [ID!]!
}

input CreateParentInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
  children: [ID!]! = []
}

input AssignStudentsToParentInput {
  parentId: ID!
  studentIds: [ID!]!
}

input CreateTeacherInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  DOB: String!
  gender: String!
}

input UpdateTeacherInput {
  firstName: String
  lastName: String
  email: String
  password: String
  DOB: String
  gender: String
  id: Int!
}