# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type user {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  DOB: String!
  studentClass: String!
  subjects: String!
}

type auth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  access_token: String!
}

type teacher {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  DOB: String!
  TeacherClass: String!
  subjects: [subject!]!
}

type subject {
  id: ID!
  name: String!
  className: [classroom!]!
  teachers: [teacher!]!
  students: [user!]!
}

type classroom {
  id: ID!
  className: String!
  classSubjects: [subject!]!
  students: [user!]!
}

type parent {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  children: [student!]!
}

type student {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  studentClass: String!
  subjects: [subject!]!
  parents: [parent!]!
  teachers: String!
}

type studentAuth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  studentClass: String!
  access_token: String!
}

type AuthParent {
  """Example field (placeholder)"""
  exampleField: Int!
}

type parentauth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  access_token: String!
}

type teacherauth {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  DOB: String!
  access_token: String!
}

type SubjectInfoType {
  subjectID: subject!
  subjectName: String!
  testScore: Float!
  CA: Float!
  examScore: Float!
  totalScore: Float!
  position: String!
}

type JuniorGrade {
  id: ID!
  studentID: student!
  subjects: [SubjectInfoType!]!
  average: Float!
  classPosition: String!
  remark: String!
}

type schedule {
  id: ID!
  eventName: String!
  eventDescription: String!
  eventDate: [DateTime!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getAllUsers: [user!]!
  findOne(id: String!): user!
  login(email: String!, password: String!): auth!
  AllClassRoom: [classroom!]!
  ClassRoom(id: String!): classroom!
  students: [student!]!
  student(id: String!): student!
  parents: [parent!]!
  parent(id: String!): parent!
  subjects: [subject!]!
  subject(id: ID!): subject!
  teachers: [teacher!]!
  teacher(id: String!): teacher!
  studentLogin(email: String!, password: String!): studentAuth!
  parentLogin(email: String!, password: String!): parentauth!
  authParents: [AuthParent!]!
  authParent(id: Int!): AuthParent!
  teacherLogin(email: String!, password: String!): teacherauth!
  juniorGrades: [JuniorGrade!]!
  juniorGrade(id: ID!): JuniorGrade!
  schedules: [schedule!]!
  schedule(id: ID!): schedule!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): user!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): String!
  removeUser(id: String!): String!
  createClassRoom(createClassRoomInput: CreateClassRoomInput!): classroom!
  assignStudentToClass(assignStudentClass: AssignClassRoom!): classroom!
  assignSubjectsToClass(assignSubjectsClass: AssignSubjectClass!): classroom!
  updateClassRoom(id: ID!, updateClassRoomInput: UpdateClassRoomInput!): classroom!
  removeClassRoom(id: ID!): String!
  createStudent(createStudentInput: CreateStudentInput!): student!
  assignParentsToStudent(assigParentsToStudent: AssignParentsToStudentInput!): student!
  assignSubjectsToStudent(assignSubjectsToStudent: AssignSubjectsToStudentInput!): student!
  updateStudent(id: ID!, updateStudentInput: UpdateStudentInput!): student!
  removeStudent(id: ID!): String!
  createParent(createParentInput: CreateParentInput!): parent!
  updateParent(updateParentInput: UpdateParentInput!, id: ID!): parent!
  removeParent(id: ID!): String!
  createSubject(createSubjectInput: CreateSubjectInput!): subject!
  assignTeacherToSubject(assignTeacherToSubject: AssignTeacherToSubjectInput!): subject!
  assignSubjectToStudents(assignStudentToSubject: AssignSudentsToSubjectInput!): subject!
  updateSubject(id: ID!, updateSubjectInput: UpdateSubjectInput!): subject!
  removeSubject(id: ID!): String!
  createTeacher(createTeacherInput: CreateTeacherInput!): teacher!
  assignSubjectsToTeacher(assignSubjectsToTeacher: AssignSubjectToTeacherInput!): teacher!
  updateTeacher(id: ID!, updateTeacherInput: UpdateTeacherInput!): teacher!
  removeTeacher(id: ID!): String!
  updateAuthParent(updateAuthParentInput: String!): AuthParent!
  removeAuthParent(id: Int!): AuthParent!
  createJuniorGrade(createJuniorGradeInput: CreateJuniorGradeInput!): JuniorGrade!
  updateJuniorGrade(updateJuniorGradeInput: UpdateJuniorGradeInput!, id: ID!): JuniorGrade!
  removeJuniorGrade(id: ID!): String!
  createSchedule(createScheduleInput: CreateScheduleInput!): schedule!
  updateSchedule(updateScheduleInput: UpdateScheduleInput!): schedule!
  removeSchedule(id: Int!): schedule!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  gender: String
  DOB: String
  subjects: ID
  studentClass: String
}

input CreateClassRoomInput {
  className: String!
  classSubjects: [ID!]! = []
  students: [ID!]! = []
}

input AssignClassRoom {
  classId: ID!
  studentIds: [ID!]!
}

input AssignSubjectClass {
  classId: ID!
  subjectIds: [ID!]!
}

input UpdateClassRoomInput {
  className: String
  classSubjects: [String!]
  students: [ID!] = []
  studentsId: [ID!]
}

input CreateStudentInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
  studentClass: String!
  parents: [ID!]! = []
  subjects: [ID!]! = []
}

input AssignParentsToStudentInput {
  studentId: ID!
  parentIds: [ID!]!
}

input AssignSubjectsToStudentInput {
  studentId: ID!
  subjectIds: [ID!]!
}

input UpdateStudentInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  gender: String
  studentClass: String
  parents: [ID!] = []
  subjects: [ID!] = []
  DOB: String!
}

input CreateParentInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  gender: String!
  children: [ID!]! = []
}

input UpdateParentInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
  gender: String
  children: [ID!] = []
}

input CreateSubjectInput {
  name: String!
  teachers: [ID!]! = []
  className: [ID!]! = []
  students: [ID!]! = []
}

input AssignTeacherToSubjectInput {
  subjectId: ID!
  teacherIds: [ID!]!
}

input AssignSudentsToSubjectInput {
  subjectId: ID!
  studentIds: [ID!]!
}

input UpdateSubjectInput {
  name: String
  teachers: [ID!] = []
  className: [ID!] = []
  students: [ID!] = []
}

input CreateTeacherInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  DOB: String!
  gender: String!
  subjects: [ID!]! = []
}

input AssignSubjectToTeacherInput {
  teacherId: ID!
  subjectIds: [ID!]!
}

input UpdateTeacherInput {
  firstName: String
  lastName: String
  email: String
  password: String
  DOB: String
  gender: String
  subjects: [ID!] = []
}

input CreateJuniorGradeInput {
  studentID: String!
  subjects: [SubjectInput!]!
  average: Float!
  classPosition: String!
  remark: String!
}

input SubjectInput {
  subjectID: ID!
  subjectName: String!
  testScore: Float!
  CA: Float!
  examScore: Float!
  totalScore: Float!
  position: String!
}

input UpdateJuniorGradeInput {
  studentID: String
  subjects: [SubjectInput!]
  average: Float
  classPosition: String
  remark: String
}

input CreateScheduleInput {
  eventName: String!
  eventDescription: String!
  eventDate: [String!]!
}

input UpdateScheduleInput {
  eventName: String
  eventDescription: String
  eventDate: [String!]
  id: Int!
}